//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryannkelly/Desktop/CfgParse/src/test/CSharp/Poseidon.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

 namespace RapNet.generated;
 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PoseidonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, SINGLE_LINE_COMMENT=33, EMPTY_DELIMITED_COMMENT=34, DELIMITED_COMMENT=35, 
		WHITESPACES=36, PREPROCESS=37, LITERAL_STRING=38, LITERAL_INTEGER=39, 
		LITERAL_FLOAT=40, LITERAL_BOOLEAN=41, LITERAL_NULL=42, IDENTIFIER=43, 
		SCIENTIFIC=44;
	public const int
		RULE_computationalUnit = 0, RULE_classDefinition = 1, RULE_classBlock = 2, 
		RULE_classExtension = 3, RULE_statement = 4, RULE_variableAssignment = 5, 
		RULE_variableDeclaratorId = 6, RULE_variableInitializer = 7, RULE_arrayInitializer = 8, 
		RULE_literal = 9, RULE_literalBoolean = 10, RULE_literalString = 11, RULE_literalNull = 12, 
		RULE_literalNumeric = 13, RULE_literalFloat = 14, RULE_literalInteger = 15, 
		RULE_deleteStatement = 16, RULE_expression = 17, RULE_parExpression = 18, 
		RULE_primaryExpression = 19, RULE_identifier = 20;
	public static readonly string[] ruleNames = {
		"computationalUnit", "classDefinition", "classBlock", "classExtension", 
		"statement", "variableAssignment", "variableDeclaratorId", "variableInitializer", 
		"arrayInitializer", "literal", "literalBoolean", "literalString", "literalNull", 
		"literalNumeric", "literalFloat", "literalInteger", "deleteStatement", 
		"expression", "parExpression", "primaryExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "';'", "'{'", "'}'", "':'", "'='", "'['", "']'", "','", 
		"'delete'", "'++'", "'--'", "'+'", "'-'", "'^'", "'*'", "'/'", "'%'", 
		"'<<'", "'>>'", "'<='", "'>='", "'>'", "'<'", "'=='", "'!='", "'+='", 
		"'-='", "'*='", "'/='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "SINGLE_LINE_COMMENT", 
		"EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", "PREPROCESS", 
		"LITERAL_STRING", "LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_BOOLEAN", 
		"LITERAL_NULL", "IDENTIFIER", "SCIENTIFIC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Poseidon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PoseidonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PoseidonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PoseidonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PoseidonParser.Eof, 0); }
		public ComputationalUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterComputationalUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitComputationalUnit(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalUnitContext computationalUnit() {
		ComputationalUnitContext _localctx = new ComputationalUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalUnit);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 42;
					classDefinition();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtensionContext classExtension() {
			return GetRuleContext<ClassExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBlockContext classBlock() {
			return GetRuleContext<ClassBlockContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__0);
			State = 52;
			identifier();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 53;
				classExtension();
				}
			}

			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 56;
				classBlock();
				}
			}

			State = 59;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__2);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 64;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 62;
					classDefinition();
					}
					break;
				case T__9:
				case IDENTIFIER:
					{
					State = 63;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterClassExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitClassExtension(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtensionContext classExtension() {
		ClassExtensionContext _localctx = new ClassExtensionContext(Context, State);
		EnterRule(_localctx, 6, RULE_classExtension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__4);
			State = 72;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				variableAssignment();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				deleteStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			variableDeclaratorId();
			State = 79;
			Match(T__5);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 80;
				arrayInitializer();
				}
				break;
			case 2:
				{
				State = 81;
				expression(0);
				}
				break;
			}
			State = 84;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			identifier();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 87;
				Match(T__6);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__30) | (1L << LITERAL_STRING) | (1L << LITERAL_INTEGER) | (1L << LITERAL_FLOAT) | (1L << LITERAL_BOOLEAN) | (1L << LITERAL_NULL))) != 0)) {
					{
					State = 88;
					variableInitializer();
					}
				}

				State = 91;
				Match(T__7);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableInitializer);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__2);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__30) | (1L << LITERAL_STRING) | (1L << LITERAL_INTEGER) | (1L << LITERAL_FLOAT) | (1L << LITERAL_BOOLEAN) | (1L << LITERAL_NULL))) != 0)) {
				{
				State = 102;
				variableInitializer();
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 103;
						Match(T__8);
						State = 104;
						variableInitializer();
						}
						} 
					}
					State = 109;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 112;
				Match(T__8);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNumericContext literalNumeric() {
			return GetRuleContext<LiteralNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_literal);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				literalNumeric();
				}
				break;
			case LITERAL_BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				literalBoolean();
				}
				break;
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122;
				literalString();
				}
				break;
			case LITERAL_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				literalNull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_BOOLEAN() { return GetToken(PoseidonParser.LITERAL_BOOLEAN, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 20, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(LITERAL_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(PoseidonParser.LITERAL_STRING, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(LITERAL_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_NULL() { return GetToken(PoseidonParser.LITERAL_NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 24, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(LITERAL_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		public LiteralNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralNumeric(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNumericContext literalNumeric() {
		LiteralNumericContext _localctx = new LiteralNumericContext(Context, State);
		EnterRule(_localctx, 26, RULE_literalNumeric);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				literalInteger();
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				literalFloat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(PoseidonParser.LITERAL_FLOAT, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 28, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(LITERAL_FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(PoseidonParser.LITERAL_INTEGER, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 30, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(LITERAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__9);
			State = 141;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PoseidonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__30:
			case LITERAL_STRING:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_BOOLEAN:
			case LITERAL_NULL:
				{
				State = 144;
				primaryExpression();
				}
				break;
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				{
				State = 145;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 146;
				expression(9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 183;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 152;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IDENTIFIER:
							{
							State = 150;
							Match(IDENTIFIER);
							}
							break;
						case T__30:
							{
							State = 151;
							parExpression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 154;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 156;
						Match(T__14);
						State = 157;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 159;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 161;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 162;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 165;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__18 || _la==T__19) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 166;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 168;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 169;
						expression(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 171;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__25) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 172;
						expression(3);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 174;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 175;
						expression(1);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 177;
						Match(T__6);
						State = 178;
						expression(0);
						State = 179;
						Match(T__7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 182;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__30);
			State = 189;
			expression(0);
			State = 190;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primaryExpression);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(T__30);
				State = 193;
				expression(0);
				State = 194;
				Match(T__31);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				arrayInitializer();
				}
				break;
			case LITERAL_STRING:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_BOOLEAN:
			case LITERAL_NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197;
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PoseidonParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPoseidonListener typedListener = listener as IPoseidonListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\xCD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x34', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x39', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '<', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x43', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x46', '\v', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'U', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\\', '\n', '\b', '\x3', '\b', '\a', '\b', '_', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x62', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x66', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'l', '\n', '\n', '\f', '\n', '\xE', '\n', 'o', '\v', 
		'\n', '\x5', '\n', 'q', '\n', '\n', '\x3', '\n', '\a', '\n', 't', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'w', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x7F', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x89', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x96', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x9B', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\xBA', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xBD', '\v', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xC9', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x2', '\x3', '$', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', '\x2', '\t', '\x3', '\x2', '\r', '\x10', 
		'\x3', '\x2', '\x12', '\x14', '\x3', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x17', '\x1A', '\x3', '\x2', '\x1B', '\x1C', '\x4', '\x2', '\b', '\b', 
		'\x1D', ' ', '\x3', '\x2', '\r', '\xE', '\x2', '\xD7', '\x2', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'N', '\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'X', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'g', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x16', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', ' ', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x8E', '\x3', '\x2', '\x2', '\x2', '$', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xBE', '\x3', '\x2', '\x2', '\x2', '(', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xCA', '\x3', '\x2', '\x2', '\x2', ',', '.', 
		'\x5', '\x4', '\x3', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', 
		'\a', '\x2', '\x2', '\x3', '\x33', '/', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', '\x36', '\x38', '\x5', 
		'*', '\x16', '\x2', '\x37', '\x39', '\x5', '\b', '\x5', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x6', 
		'\x4', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x4', 
		'\x2', '\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', '?', '\x44', '\a', 
		'\x5', '\x2', '\x2', '@', '\x43', '\x5', '\x4', '\x3', '\x2', '\x41', 
		'\x43', '\x5', '\n', '\x6', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x6', '\x2', '\x2', 
		'H', '\a', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\a', '\x2', '\x2', 
		'J', 'K', '\x5', '*', '\x16', '\x2', 'K', '\t', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\x5', '\f', '\a', '\x2', 'M', 'O', '\x5', '\"', '\x12', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', '\v', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\xE', '\b', '\x2', 
		'Q', 'T', '\a', '\b', '\x2', '\x2', 'R', 'U', '\x5', '\x12', '\n', '\x2', 
		'S', 'U', '\x5', '$', '\x13', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\a', '\x4', '\x2', '\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 
		'X', '`', '\x5', '*', '\x16', '\x2', 'Y', '[', '\a', '\t', '\x2', '\x2', 
		'Z', '\\', '\x5', '\x10', '\t', '\x2', '[', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '_', '\a', '\n', '\x2', '\x2', '^', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x66', '\x5', '\x12', '\n', '\x2', '\x64', '\x66', '\x5', '$', 
		'\x13', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'g', 'p', '\a', '\x5', '\x2', '\x2', 'h', 'm', '\x5', '\x10', '\t', '\x2', 
		'i', 'j', '\a', '\v', '\x2', '\x2', 'j', 'l', '\x5', '\x10', '\t', '\x2', 
		'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'h', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 'u', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', '\v', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\x6', '\x2', '\x2', 'y', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'z', '\x7F', '\x5', '\x1C', '\xF', '\x2', '{', '\x7F', '\x5', '\x16', 
		'\f', '\x2', '|', '\x7F', '\x5', '\x18', '\r', '\x2', '}', '\x7F', '\x5', 
		'\x1A', '\xE', '\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', '~', '{', 
		'\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '+', '\x2', '\x2', '\x81', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\a', '(', '\x2', '\x2', '\x83', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', ',', '\x2', 
		'\x2', '\x85', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x5', 
		' ', '\x11', '\x2', '\x87', '\x89', '\x5', '\x1E', '\x10', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'*', '\x2', '\x2', '\x8B', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', ')', '\x2', '\x2', '\x8D', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', '\f', '\x2', '\x2', '\x8F', '\x90', '\x5', '$', 
		'\x13', '\x2', '\x90', '#', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\b', '\x13', '\x1', '\x2', '\x92', '\x96', '\x5', '(', '\x15', '\x2', 
		'\x93', '\x94', '\t', '\x2', '\x2', '\x2', '\x94', '\x96', '\x5', '$', 
		'\x13', '\v', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\f', '\n', '\x2', '\x2', '\x98', '\x9B', '\a', '-', '\x2', 
		'\x2', '\x99', '\x9B', '\x5', '&', '\x14', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xBA', '\x5', '$', '\x13', 
		'\v', '\x9D', '\x9E', '\f', '\t', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x11', '\x2', '\x2', '\x9F', '\xBA', '\x5', '$', '\x13', '\n', '\xA0', 
		'\xA1', '\f', '\b', '\x2', '\x2', '\xA1', '\xA2', '\t', '\x3', '\x2', 
		'\x2', '\xA2', '\xBA', '\x5', '$', '\x13', '\t', '\xA3', '\xA4', '\f', 
		'\a', '\x2', '\x2', '\xA4', '\xA5', '\t', '\x2', '\x2', '\x2', '\xA5', 
		'\xBA', '\x5', '$', '\x13', '\b', '\xA6', '\xA7', '\f', '\x6', '\x2', 
		'\x2', '\xA7', '\xA8', '\t', '\x4', '\x2', '\x2', '\xA8', '\xBA', '\x5', 
		'$', '\x13', '\a', '\xA9', '\xAA', '\f', '\x5', '\x2', '\x2', '\xAA', 
		'\xAB', '\t', '\x5', '\x2', '\x2', '\xAB', '\xBA', '\x5', '$', '\x13', 
		'\x6', '\xAC', '\xAD', '\f', '\x4', '\x2', '\x2', '\xAD', '\xAE', '\t', 
		'\x6', '\x2', '\x2', '\xAE', '\xBA', '\x5', '$', '\x13', '\x5', '\xAF', 
		'\xB0', '\f', '\x3', '\x2', '\x2', '\xB0', '\xB1', '\t', '\a', '\x2', 
		'\x2', '\xB1', '\xBA', '\x5', '$', '\x13', '\x3', '\xB2', '\xB3', '\f', 
		'\r', '\x2', '\x2', '\xB3', '\xB4', '\a', '\t', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '$', '\x13', '\x2', '\xB5', '\xB6', '\a', '\n', '\x2', 
		'\x2', '\xB6', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\f', 
		'\f', '\x2', '\x2', '\xB8', '\xBA', '\t', '\b', '\x2', '\x2', '\xB9', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '!', '\x2', '\x2', '\xBF', '\xC0', '\x5', '$', '\x13', '\x2', 
		'\xC0', '\xC1', '\a', '\"', '\x2', '\x2', '\xC1', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '!', '\x2', '\x2', '\xC3', '\xC4', 
		'\x5', '$', '\x13', '\x2', '\xC4', '\xC5', '\a', '\"', '\x2', '\x2', '\xC5', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', '\x5', '\x12', '\n', 
		'\x2', '\xC7', '\xC9', '\x5', '\x14', '\v', '\x2', '\xC8', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '-', '\x2', '\x2', '\xCB', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '/', '\x33', '\x38', ';', '\x42', '\x44', 'N', 'T', 
		'[', '`', '\x65', 'm', 'p', 'u', '~', '\x88', '\x95', '\x9A', '\xB9', 
		'\xBB', '\xC8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
